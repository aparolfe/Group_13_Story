var SerialPort = require("serialport");
var express=require('express');
var app = express();
var xbee_api = require('xbee-api');
var ml = require('machine_learning');
var http = require('http').Server(app);
var io = require('socket.io')(http); 
app.use(express.static('src'));

// xBee communication setup
var xbee_11_rssi = 0;
var xbee_12_rssi = 0;
var xbee_13_rssi = 0;
var xbee_14_rssi = 0;
var rssi_total =[];
var C = xbee_api.constants;
var XBeeAPI = new xbee_api.XBeeAPI({
    api_mode: 2
});

var portName = process.argv[2];

var sampleDelay = 2000;

//Note that with the XBeeAPI parser, the serialport's "data" event will not fire when messages are received!
var portConfig = {
    baudRate: 9600,
    parser: XBeeAPI.rawParser()
};

var sp;
sp = new SerialPort.SerialPort(portName, portConfig);

var RSSIRequestPacket = {
    type: C.FRAME_TYPE.ZIGBEE_TRANSMIT_REQUEST,
    destination64: "000000000000ffff",
    broadcastRadius: 0x01,
    options: 0x00,
    data: "test"
}

var requestRSSI = function(){
    sp.write(XBeeAPI.buildFrame(RSSIRequestPacket));
}

sp.on("open", function () {
    console.log('open');
    requestRSSI();
    setInterval(requestRSSI, sampleDelay);
});

XBeeAPI.on("frame_object", function(frame) {
    if (frame.type >= 140){
	if (frame.data[1] == 11)
	{ xbee_11_rssi = frame.data[0];}
	if (frame.data[1] == 12)
	{ xbee_12_rssi = frame.data[0];}
	if (frame.data[1] == 13)
	{ xbee_13_rssi = frame.data[0];}
	if (frame.data[1] == 14)
	{ xbee_14_rssi = frame.data[0];}
	rssi_total =[xbee_11_rssi,xbee_12_rssi,xbee_13_rssi,xbee_14_rssi];
	//console.log(rssi_total);
    }
});

//Fix for the failed beacon
function ignore_third(data) {
    var length = data.length;
    for (var ii = 0; ii < length; ii++) {
	data[ii].splice(2,1);
    }
    return data;
}

// Training Data
var data_corridor_1 =
[ [ 52, 80, 83, 49 ],  [ 53, 77, 82, 43 ],  [ 65, 75, 80, 51 ],  [ 64, 70, 86, 56 ],  [ 62, 80, 81, 47 ],  [ 62, 80, 88, 45 ],
  [ 54, 76, 85, 41 ],  [ 51, 70, 80, 49 ],  [ 57, 77, 78, 54 ],  [ 52, 69, 93, 58 ],  [ 55, 70, 255, 45 ],  [ 56, 76, 91, 49 ],
  [ 56, 71, 74, 50 ],  [ 57, 72, 255, 56 ],  [ 59, 78, 85, 54 ],  [ 57, 68, 85, 49 ],  [ 62, 77, 81, 51 ],  [ 57, 71, 86, 64 ],
  [ 54, 69, 90, 46 ],  [ 53, 66, 82, 61 ],  [ 70, 77, 94, 55 ],  [ 58, 82, 93, 54 ],  [ 60, 70, 88, 50 ],  [ 63, 75, 89, 73 ],
  [ 53, 69, 88, 51 ],  [ 57, 68, 90, 58 ],  [ 57, 71, 94, 56 ],  [ 56, 76, 96, 57 ],  [ 54, 70, 93, 57 ],  [ 66, 80, 91, 58 ],
  [ 60, 68, 97, 54 ],  [ 61, 64, 95, 58 ],  [ 57, 70, 93, 59 ],  [ 73, 65, 95, 62 ],  [ 66, 70, 92, 57 ],  [ 54, 255, 98, 66 ],
  [ 67, 65, 96, 66 ],  [ 51, 62, 93, 61 ],  [ 68, 67, 96, 70 ],  [ 48, 70, 95, 67 ],  [ 51, 69, 97, 60 ],  [ 53, 66, 96, 64 ],
  [ 57, 63, 95, 61 ],  [ 55, 64, 97, 67 ],  [ 51, 83, 96, 63 ],  [ 48, 70, 96, 61 ],  [ 51, 68, 98, 58 ],  [ 57, 69, 98, 65 ],
  [ 53, 67, 95, 69 ],  [ 53, 61, 94, 67 ],  [ 64, 68, 98, 66 ],  [ 52, 67, 98, 75 ],  [ 49, 73, 98, 69 ],  [ 54, 71, 98, 58 ],
  [ 51, 61, 98, 64 ],  [ 54, 67, 98, 65 ],  [ 55, 66, 97, 75 ],  [ 48, 60, 97, 71 ],  [ 50, 58, 97, 64 ],  [ 64, 68, 97, 70 ],
  [ 53, 78, 97, 81 ],  [ 53, 69, 98, 72 ],  [ 50, 65, 98, 71 ],  [ 48, 65, 98, 73 ],  [ 51, 64, 98, 75 ],  [ 49, 69, 98, 67 ],
  [ 57, 69, 98, 76 ],  [ 53, 61, 98, 70 ],  [ 62, 68, 98, 74 ],  [ 52, 59, 98, 66 ],  [ 52, 70, 98, 80 ],  [ 54, 56, 98, 67 ],
  [ 55, 67, 98, 70 ],  [ 52, 62, 98, 77 ],  [ 51, 63, 98, 76 ],  [ 49, 63, 98, 70 ],  [ 57, 60, 98, 74 ],  [ 56, 69, 98, 78 ],
  [ 53, 59, 98, 70 ],  [ 43, 60, 98, 73 ],  [ 45, 60, 98, 67 ],  [ 52, 64, 98, 80 ],  [ 45, 74, 98, 69 ],  [ 46, 56, 98, 78 ],
  [ 49, 73, 98, 73 ],  [ 48, 65, 98, 69 ],  [ 42, 58, 98, 70 ],  [ 43, 60, 98, 67 ],  [ 49, 60, 98, 70 ],  [ 53, 61, 98, 72 ],
  [ 46, 58, 98, 67 ],  [ 49, 51, 98, 73 ],  [ 45, 51, 98, 69 ],  [ 42, 62, 98, 69 ],  [ 43, 55, 98, 73 ],  [ 59, 56, 98, 70 ],
  [ 46, 52, 98, 73 ],  [ 48, 55, 98, 67 ],  [ 54, 51, 98, 75 ],  [ 46, 67, 98, 80 ],  [ 52, 49, 98, 69 ],  [ 39, 61, 98, 73 ],
  [ 58, 53, 98, 69 ],  [ 42, 52, 98, 78 ],  [ 39, 54, 98, 83 ],  [ 37, 52, 98, 84 ],  [ 40, 55, 98, 74 ],  [ 49, 49, 98, 79 ],
  [ 40, 47, 98, 75 ],  [ 39, 44, 98, 67 ],  [ 48, 46, 98, 75 ],  [ 48, 40, 98, 86 ],  [ 47, 41, 98, 84 ],  [ 44, 52, 98, 70 ],
  [ 49, 54, 98, 74 ],  [ 45, 41, 98, 82 ],  [ 38, 46, 98, 80 ],  [ 41, 41, 98, 69 ],  [ 35, 45, 98, 67 ],  [ 39, 43, 98, 75 ] ];


var data_corridor_2 =
 [[ 77, 63, 85, 54 ],  [ 69, 63, 70, 52 ],  [ 71, 61, 72, 60 ],  [ 81, 60, 60, 54 ],  [ 78, 67, 77, 61 ],  [ 75, 76, 70, 61 ],
  [ 72, 65, 68, 57 ],  [ 65, 73, 71, 58 ],  [ 76, 68, 89, 60 ],  [ 81, 76, 71, 62 ],  [ 79, 72, 69, 68 ],  [ 82, 59, 63, 57 ],
  [ 72, 66, 69, 65 ],  [ 75, 62, 68, 71 ],  [ 79, 63, 70, 61 ],  [ 72, 69, 81, 67 ],  [ 72, 78, 80, 62 ],  [ 70, 61, 70, 61 ],
  [ 73, 66, 75, 60 ],  [ 76, 64, 72, 58 ],  [ 75, 59, 80, 63 ],  [ 72, 73, 81, 65 ],  [ 75, 77, 75, 74 ],  [ 75, 58, 69, 58 ],
  [ 73, 63, 80, 63 ],  [ 66, 67, 74, 74 ],  [ 72, 69, 73, 59 ],  [ 71, 72, 76, 61 ],  [ 77, 66, 76, 66 ],  [ 76, 66, 79, 64 ],
  [ 69, 74, 78, 64 ],  [ 75, 65, 87, 60 ],  [ 71, 61, 80, 79 ],  [ 74, 62, 78, 74 ],  [ 73, 71, 76, 64 ],  [ 71, 60, 86, 72 ],
  [ 75, 60, 89, 60 ],  [ 73, 59, 93, 67 ],  [ 71, 66, 89, 67 ],  [ 71, 69, 78, 67 ],  [ 76, 60, 79, 70 ],  [ 75, 61, 83, 72 ],
  [ 82, 65, 87, 69 ],  [ 70, 67, 78, 69 ],  [ 67, 62, 88, 67 ],  [ 67, 60, 84, 66 ],  [ 75, 79, 87, 59 ],  [ 72, 65, 84, 71 ],
  [ 81, 63, 76, 68 ],  [ 65, 58, 85, 77 ],  [ 68, 59, 255, 69 ],  [ 66, 61, 81, 76 ],  [ 74, 65, 95, 67 ],  [ 65, 66, 84, 68 ],
  [ 70, 55, 85, 74 ],  [ 69, 61, 91, 76 ],  [ 74, 60, 255, 75 ],  [ 77, 54, 93, 77 ],  [ 61, 57, 90, 73 ],  [ 67, 57, 80, 72 ],
  [ 71, 66, 93, 72 ],  [ 62, 51, 92, 77 ],  [ 63, 55, 255, 77 ],  [ 71, 51, 90, 69 ],  [ 76, 61, 82, 69 ],  [ 62, 56, 84, 70 ],
  [ 68, 74, 88, 74 ],  [ 56, 56, 89, 72 ],  [ 63, 55, 79, 67 ],  [ 57, 54, 98, 78 ],  [ 73, 59, 90, 78 ],  [ 61, 54, 86, 75 ],
  [ 79, 58, 88, 76 ],  [ 61, 54, 93, 76 ],  [ 65, 58, 92, 69 ],  [ 73, 57, 84, 79 ],  [ 60, 55, 85, 71 ],  [ 69, 51, 86, 76 ],
  [ 61, 63, 83, 79 ],  [ 78, 54, 92, 79 ],  [ 60, 51, 92, 73 ],  [ 59, 51, 92, 71 ],  [ 62, 57, 83, 75 ],  [ 60, 59, 88, 255 ],
  [ 56, 56, 89, 76 ],  [ 59, 54, 93, 77 ],  [ 57, 50, 91, 77 ],  [ 62, 51, 89, 77 ],  [ 63, 53, 88, 72 ],  [ 63, 56, 92, 71 ],
  [ 53, 63, 90, 72 ],  [ 74, 52, 96, 82 ],  [ 54, 48, 88, 85 ],  [ 54, 45, 92, 84 ],  [ 54, 61, 90, 87 ],  [ 60, 44, 94, 73 ],
  [ 57, 57, 94, 75 ],  [ 50, 47, 87, 76 ],  [ 53, 45, 90, 72 ],  [ 62, 48, 90, 81 ],  [ 55, 58, 90, 79 ],  [ 62, 49, 89, 76 ],
  [ 51, 46, 89, 76 ],  [ 59, 38, 89, 72 ],  [ 60, 39, 91, 73 ],  [ 49, 43, 91, 83 ],  [ 53, 51, 90, 76 ],  [ 51, 59, 92, 77 ],
  [ 49, 46, 94, 77 ],  [ 55, 45, 96, 79 ],  [ 56, 47, 96, 76 ],  [ 44, 47, 89, 83 ],  [ 51, 55, 91, 84 ],  [ 49, 51, 96, 79 ],
  [ 63, 42, 96, 81 ],  [ 43, 41, 96, 76 ],  [ 43, 42, 94, 75 ],  [ 55, 42, 91, 77 ],  [ 48, 52, 90, 83 ],  [ 69, 49, 96, 82 ] ];

var y_result_corridor =
[ 1, 1, 1, 1, 1, 1,
  2, 2, 2, 2, 2, 2,
  3, 3, 3, 3, 3, 3,
  4, 4, 4, 4, 4, 4,
  5, 5, 5, 5, 5, 5,
  6, 6, 6, 6, 6, 6,
  7, 7, 7, 7, 7, 7,
  8, 8, 8, 8, 8, 8,
  9, 9, 9, 9, 9, 9,
  10,10,10, 10, 10, 10,
  11,11,11, 11, 11, 11,
  12,12,12, 12, 12, 12,
  13,13,13, 13, 13, 13,
  14,14,14, 14, 14, 14,
  15,15,15, 15, 15, 15,
  16,16,16, 16, 16, 16,
  17,17,17, 17, 17, 17,
  18,18,18, 18, 18, 18,
  19,19,19, 19, 19, 19,
  20,20,20, 20, 20, 20];

var x_result_corridor_1 =
[ 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1 ];

var x_result_corridor_2 = 
[ 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7 ];
      
var data_windows = 
[ [ 44, 42, 0, 65 ],  [ 43, 42, 0, 63 ],  [ 38, 50, 0, 68 ],  [ 45, 48, 0, 73 ],  [ 36, 51, 0, 64 ],  [ 56, 50, 0, 65 ],
  [ 45, 41, 0, 76 ],  [ 40, 47, 0, 79 ],  [ 60, 39, 0, 79 ],  [ 45, 36, 0, 74 ],  [ 42, 37, 0, 79 ],  [ 42, 37, 0, 80 ],
  [ 59, 45, 0, 79 ],  [ 44, 39, 0, 88 ],  [ 44, 39, 0, 84 ],  [ 43, 45, 0, 82 ],  [ 61, 39, 0, 76 ],  [ 49, 44, 0, 86 ],
  [ 43, 45, 0, 81 ],  [ 44, 41, 0, 82 ],  [ 46, 35, 0, 81 ],  [ 46, 39, 0, 83 ],  [ 40, 37, 0, 82 ],  [ 40, 47, 0, 72 ],
  [ 55, 41, 0, 86 ],  [ 43, 37, 0, 81 ],  [ 46, 41, 0, 85 ],  [ 51, 38, 0, 86 ],  [ 44, 42, 0, 85 ],  [ 45, 48, 0, 87 ],
  [ 59, 51, 0, 79 ],  [ 55, 39, 98, 85 ],  [ 47, 39, 98, 86 ],  [ 53, 38, 98, 81 ],  [ 47, 44, 98, 81 ],  [ 48, 40, 97, 82 ],
  [ 57, 50, 94, 86 ],  [ 49, 41, 95, 79 ],  [ 45, 42, 92, 78 ],  [ 47, 44, 94, 78 ],  [ 49, 45, 92, 75 ],  [ 51, 44, 89, 79 ] ];

var data_elevators =
[ [ 56, 77, 76, 40 ],  [ 56, 71, 78, 48 ],  [ 61, 76, 86, 40 ],  [ 64, 78, 79, 55 ],  [ 55, 74, 81, 51 ],  [ 63, 75, 89, 51 ],
  [ 57, 75, 82, 40 ],  [ 69, 81, 77, 71 ],  [ 74, 87, 93, 39 ],  [ 65, 81, 77, 50 ],  [ 67, 81, 75, 50 ],  [ 78, 81, 74, 58 ],
  [ 66, 84, 84, 46 ],  [ 72, 82, 75, 46 ],  [ 71, 79, 83, 50 ],  [ 67, 81, 84, 51 ],  [ 73, 76, 79, 50 ],  [ 78, 79, 75, 63 ],
  [ 71, 79, 73, 49 ],  [ 81, 81, 76, 55 ],  [ 72, 83, 80, 55 ],  [ 72, 77, 85, 65 ],  [ 81, 79, 75, 65 ],  [ 80, 73, 78, 53 ],
  [ 72, 86, 82, 61 ],  [ 75, 74, 75, 55 ],  [ 75, 76, 75, 55 ],  [ 255, 81, 72, 47 ],  [ 76, 76, 77, 76 ],  [ 81, 76, 71, 61 ],
  [ 80, 77, 69, 56 ],  [ 84, 80, 75, 64 ],  [ 82, 73, 74, 66 ],  [ 75, 69, 69, 56 ],  [ 79, 75, 68, 59 ],  [ 80, 72, 67, 57 ],
  [ 75, 70, 72, 59 ],  [ 75, 62, 77, 51 ],  [ 83, 63, 80, 60 ],  [ 81, 67, 65, 55 ],  [ 72, 60, 77, 60 ],  [ 71, 63, 70, 56 ] ];

var x_result_short =
[ 1, 1, 1, 1, 1, 1,
  2, 2, 2, 2, 2, 2,
  3, 3, 3, 3, 3, 3,
  4, 4, 4, 4, 4, 4,
  5, 5, 5, 5, 5, 5,
  6, 6, 6, 6, 6, 6,
  7, 7, 7, 7, 7, 7 ];

var y_result_windows =
[ 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20 ];

var y_result_elevators =
[ 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1 ];

// Final Training data
var data =  ignore_third(data_corridor_1.concat(data_corridor_2).concat(data_windows).concat(data_elevators));
var y_result = y_result_corridor.concat(y_result_corridor).concat(y_result_windows).concat(y_result_elevators);
var x_result = x_result_corridor_1.concat(x_result_corridor_2).concat(x_result_short).concat(x_result_short);

// Knn Logic
var x_predicted = 0;
var y_predicted = 0;

function predict(input,knn){
    var predicted = knn.predict({
        x: input,
        k: 1,
        weightf : {type : "none"},
        distance : {type : 'euclidean'}
    });
    return predicted;
};

var x_knn = new ml.KNN({
    data : data,
    result : x_result
});

var y_knn = new ml.KNN({
    data : data,
    result : y_result
});

function predict_and_send(){
    rssi_total.splice(2,1);		// Fix for failed xBee
    console.log(rssi_total);
    x_predicted= predict(rssi_total,x_knn);
    y_predicted = predict(rssi_total,y_knn);
    console.log(x_predicted,y_predicted);
    io.emit('data',{x:x_predicted,y:y_predicted});        
}

io.on('connection', function(socket){
    console.log('a user connected');
    socket.on('update',function(msg){
	console.log(msg);
	sp.write(msg);
    });
});

setInterval(predict_and_send,2000);

http.listen(3000, function(){
    console.log('listening on *:3000');
});

app.get('/', function(req, res){
    res.sendFile('index.html' , { root : __dirname});
});

